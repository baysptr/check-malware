import os
import sys
import time
import datetime
import sqlite3
import hashlib
import requests
import json
import socket

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from sqlite3 import Error
from filehash import FileHash
from check_malware import check_malware

dir_tagert = ''
api = "http://103.146.132.137/"
parent_id = ''
hs = socket.gethostname()
myip = socket.gethostbyname(hs)

class Watcher:
    # DIRECTORY_TO_WATCH = dir_tagert

    def __init__(self, path):
        self.observer = Observer()
        self.DIRECTORY_TO_WATCH = path

    def run(self):
        event_handler = Handler()
        self.observer.schedule(event_handler, self.DIRECTORY_TO_WATCH, recursive=True)
        self.observer.start()
        try:
            while True:
                time.sleep(5)
        except:
            self.observer.stop()
            print("Error")

        self.observer.join()

class Penyimpanan:
    def sql_connect():
        try:
            con = sqlite3.connect('logs.db')
            #print("Data Logs Sudah Terhubung")
            return con
        except Error:
            #print("Data Log, belum terhubung. sistem akan berjalan dengan tidak menyimpan LOGS")
            print(Error)

    def crt_tbl(con):
        cObj = con.cursor()
        cObj.execute("create table if not exists m_logs (id integer primary key, mod text not null, desc text not null, scan text, enk text not null, tgl text not null)")
        con.commit()
        print("Data Logs Sudah Terhubung")

    def tambah(con, data):
        cObj = con.cursor()
        cObj.execute("insert into m_logs(mod, desc, scan, enk, tgl) values(?,?,?,?,?)", data)
        #cObj.execute("insert into m_logs (key, enk, tgl) values (?,?,?)", mon, enk, det)
        con.commit()

class Init_logs:
    def sql_connect():
        try:
            con = sqlite3.connect('init_log.db')
            #print("Data Logs Sudah Terhubung")
            return con
        except Error:
            #print("Data Log, belum terhubung. sistem akan berjalan dengan tidak menyimpan LOGS")
            print(Error)

    def crt_tbl(con):
        cObj = con.cursor()
        cObj.execute("drop table if exists first_log")
        cObj.execute("create table first_log (id integer primary key, dir text not null, scan text, enk text not null, tgl text not null)")
        con.commit()
        print("Data Logs Sudah Terhubung")

    def tambah(con, data):
        cObj = con.cursor()
        cObj.execute("insert into first_log(dir, scan, enk, tgl) values(?,?,?,?)", data)
        #cObj.execute("insert into m_logs (key, enk, tgl) values (?,?,?)", mon, enk, det)
        con.commit()

class Pecah:
    def linear_search(item, my_list):
        found = False
        position = 0
        while position < len(my_list) and not found:
            if my_list[position] == item:
                found = True
            position = position + 1
        return found
    def check_folder(path):
        folders = []

        # r=root, d=directories, f = files
        for r, d, f in os.walk(path):
            for folder in d:
                folders.append(os.path.join(r, folder))

        if(len(folders) > 0):
            return 1
        else:
            return 0

class Handler(FileSystemEventHandler):
    currentDT = datetime.datetime.now()
    hd = FileHash('md5')
    tgl = "{}-{}-{} {}:{}:{}".format(currentDT.day, currentDT.month, currentDT.year, currentDT.hour, currentDT.minute, currentDT.second)

    @staticmethod
    def on_any_event(event):
        if event.is_directory:
            return None

        elif event.event_type == 'created':
            # Take any action here when a file is first created.
            out_text = event.src_path
            itemfound = Pecah.linear_search('swp', out_text.split('.'))
            if itemfound:
                print("...")
            else:
                print("Created: {}".format(out_text))
                print("Hash: {}".format(Handler.hd.hash_file(out_text)))
                print("Malicious: {}".format(check_malware(out_text)))
                print("Time: {}-{}-{} {}:{}:{}".format(Handler.currentDT.day, Handler.currentDT.month, Handler.currentDT.year, Handler.currentDT.hour, Handler.currentDT.minute, Handler.currentDT.second))
                c = Penyimpanan.sql_connect()
                Penyimpanan.tambah(c, ("CREATED", out_text, check_malware(out_text), Handler.hd.hash_file(out_text), Handler.tgl))
                data = {'id': parent_id, 'mode': 'C', 'filename': str(out_text), 'scan': check_malware(out_text), 'enkripsi': str(Handler.hd.hash_file(out_text))}
                req = requests.post(api+'monitoring/push_change', data, headers={'Content-Type': 'application/x-www-form-urlencoded'})
                if int(req.text) == 0:
                    print("")

        elif event.event_type == 'modified':
            # Taken any action here when a file is modified.
            out_text = event.src_path
            itemfound = Pecah.linear_search('swp', out_text.split('.'))
            if itemfound:
                print("...")
            else:
                print("Modified: {}".format(out_text))
                print("Hash: {}".format(Handler.hd.hash_file(out_text)))
                print("Malicious: {}".format(check_malware(out_text)))
                print("Time: {}-{}-{} {}:{}:{}".format(Handler.currentDT.day, Handler.currentDT.month, Handler.currentDT.year, Handler.currentDT.hour, Handler.currentDT.minute, Handler.currentDT.second))
                # print(token)
                c = Penyimpanan.sql_connect()
                Penyimpanan.tambah(c, ("MODIFIED", out_text, check_malware(out_text), Handler.hd.hash_file(out_text), Handler.tgl))
                data = {'id': parent_id, 'mode': 'M', 'filename': str(out_text), 'scan': check_malware(out_text), 'enkripsi': str(Handler.hd.hash_file(out_text))}
                req = requests.post(api + 'monitoring/push_change', data, headers={'Content-Type': 'application/x-www-form-urlencoded'})
                if int(req.text) == 0:
                    print("")

        elif event.event_type == 'deleted':
            # Taken any action here when a file is modified.
            hds = hashlib.md5()
            out_text = event.src_path
            itemfound = Pecah.linear_search('swp', out_text.split('.'))
            if itemfound:
                print("...")
            else:
                hds.update(b"Data telah dihapus")
                print("Deleted: {}".format(out_text))
                print("Hash: {}".format(hds.hexdigest()))
                print("Time: {}-{}-{} {}:{}:{}".format(Handler.currentDT.day, Handler.currentDT.month, Handler.currentDT.year, Handler.currentDT.hour, Handler.currentDT.minute, Handler.currentDT.second))
                c = Penyimpanan.sql_connect()
                Penyimpanan.tambah(c, ("DELETED", out_text, "-", hds.hexdigest(), Handler.tgl))
                data = {'id': parent_id, 'mode': 'D', 'filename': str(out_text), 'scan': str("-"), 'enkripsi': str(hds.hexdigest())}
                req = requests.post(api + 'monitoring/push_change', data, headers={'Content-Type': 'application/x-www-form-urlencoded'})
                if int(req.text) == 0:
                    print("")

if __name__ == '__main__':
    val = input("Masukan token anda: ")
    print("Token anda: ")
    print(val)

    data = {'token': str(val)}
    req = requests.post(api+'monitoring/verifikasi_token', data)
    res = json.loads(req.text)
    # print(req.status_code)
    if(int(res['id']) > 0):
        print(res['id'])
        path = str(res['folder'])
        if(Pecah.check_folder(path) == 0):
            print("Pattern Folder tidak kami temukan, mohon periksa kembali di sistem anda")
            sys.exit()
        else:
            print("Folder ditemukan")
            dir_tagert = path
            currentDT = datetime.datetime.now()
            tgl = "{}-{}-{} {}:{}:{}".format(currentDT.day, currentDT.month, currentDT.year, currentDT.hour,
                                             currentDT.minute, currentDT.second)
            i = Init_logs.sql_connect()
            Init_logs.crt_tbl(i)
            for root, dirs, files in os.walk(dir_tagert, topdown=True):
                for name in files:
                    print(os.path.join(root, name))
                    FileName = (os.path.join(root, name))

                    scan_malware = check_malware(os.path.join(root, name))

                    hasher = hashlib.md5()
                    with open(str(FileName), 'rb') as afile:
                        buf = afile.read()
                        hasher.update(buf)
                    print(hasher.hexdigest())

                    Init_logs.tambah(i, (os.path.join(root, name), scan_malware, hasher.hexdigest(), tgl))

            print("Init Logs tersimpan")

            datap = {'id': str(res['id']), 'myip': myip, 'myfile': ('init_log.db', open('init_log.db', 'rb'))}
            reqp = requests.post(api+'monitoring/push_init', data=datap, files=datap)
            if(int(reqp.text) == 0):
                print("File init monitoring not upload to server! segera hubungi super admin")
                sys.exit()

            # token = str(val)
            parent_id = str(res['id'])
            w = Watcher(dir_tagert)
            c = Penyimpanan.sql_connect()
            Penyimpanan.crt_tbl(c)
            w.run()
    else:
        print("Token tidak diketahui")
        sys.exit()
